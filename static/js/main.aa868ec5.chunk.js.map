{"version":3,"sources":["components/BoundariesChart.js","components/AddBlock.js","App.js","reportWebVitals.js","index.js"],"names":["options","annotations","stem","color","style","animation","duration","easing","startup","series","0","lineWidth","1","2","curveType","legend","colors","BoundariesChart","props","chartType","loader","data","chartEvents","eventName","callback","chartWrapper","selection","getChart","getSelection","length","selectedItem","dataTable","getDataTable","row","column","alert","JSON","stringify","value","getValue","console","log","AddBlock","className","Form","onSubmit","event","preventDefault","name","target","elements","initial","parseFloat","contributions","time","parseInt","rateReturn","rateInflation","handleAddInvestingBlock","Group","controlId","Label","Date","getFullYear","Control","type","Button","variant","App","useState","chartedData","setChartedData","startYear","endPrincipal","setEndPrincipal","endInterest","setEndInterest","endYearOfCalculationDollars","setEndYearOfCalculationDollars","investingBlocks","setInvestingBlocks","calculateTotalOverTimePeriod","toChart","currentYear","push","role","toString","moneyInput","runningTotal","yearCalculatedDollars","i","currentBlock","j","interest","useEffect","display","justifyContent","toFixed","temp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa868ec5.chunk.js","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\n\n\n\nconst options = {\n    annotations: {\n        stem: {\n            color: '#097138'\n        },\n        style: 'line'\n    },\n    animation: {\n        duration: 1000,\n        easing: 'out',\n        startup: true,\n    },\n    series: {\n        0: {color: '#080808', lineWidth: 2},\n        1: {color: '#FFFFFF', lineWidth: 2},\n        2: {color: '#008000', lineWidth: 3},\n    },\n    curveType: 'function',\n    legend: 'none',\n    colors: ['#a52714']\n};\n\n\n\nfunction BoundariesChart(props) {\n\n    return (\n        <div>\n            <Chart\n                chartType=\"AreaChart\"\n                loader={<div>Loading Chart</div>}\n                data={props.data}\n                options={options}\n                chartEvents={[\n                    {\n                        eventName: 'select',\n                        callback: ({ chartWrapper }) => {\n                            const chart = chartWrapper.getChart()\n                            const selection = chart.getSelection()\n                            if (selection.length === 1) {\n                                const [selectedItem] = selection\n                                const dataTable = chartWrapper.getDataTable()\n                                const { row, column } = selectedItem\n                                alert(\n                                    'You selected : ' +\n                                    JSON.stringify({\n                                        row,\n                                        column,\n                                        value: dataTable.getValue(row, column),\n                                    }),\n                                    null,\n                                    2,\n                                )\n                            }\n                            console.log(selection)\n                        },\n                    },\n                ]}\n            />\n        </div>\n    );\n}\n\nexport default BoundariesChart;\n","import React from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\n\n\nfunction AddBlock(props) {\n\n    function handleSubmit(event){\n        event.preventDefault();\n        console.log(\"Submitted\")\n        let name = event.target.elements.name.value;\n        let initial = parseFloat(event.target.elements.initial.value);\n        let contributions = parseFloat(event.target.elements.contributions.value)\n        let time = parseInt(event.target.elements.time.value)\n        let rateReturn = parseFloat(event.target.elements.rateReturn.value)\n        let rateInflation = parseFloat(event.target.elements.rateInflation.value)\n        props.handleAddInvestingBlock(initial, name, contributions, time, rateReturn, rateInflation)\n    }\n\n    return (\n        <div className=\"border task-adder\" style={{\"margin-top\": \"3em\"}}>\n            <h3>Add Investing Block</h3>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Label>Initial Contribution {new Date().getFullYear()}</Form.Label>\n                    <Form.Control name=\"initial\" type=\"number\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control name=\"name\" type=\"text\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>Annual Contributions</Form.Label>\n                    <Form.Control name=\"contributions\" type=\"number\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>Years At This Rate</Form.Label>\n                    <Form.Control name=\"time\" type=\"number\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>Expected Rate of Return</Form.Label>\n                    <Form.Control name=\"rateReturn\" type=\"number\"/>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>Expected Rate of Inflation</Form.Label>\n                    <Form.Control name=\"rateInflation\" type=\"number\"/>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </div>\n    );\n}\n\nexport default AddBlock;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BoundariesChart from \"./components/BoundariesChart\";\nimport {useEffect, useState} from \"react\";\nimport AddBlock from \"./components/AddBlock\";\n\nfunction App() {\n\n    const [chartedData, setChartedData] = useState([])\n\n    const [startYear, setStartYear] = useState(new Date().getFullYear())\n\n    const [endPrincipal, setEndPrincipal] = useState(null)\n\n    const [endInterest, setEndInterest] = useState(null)\n\n    const [endYearOfCalculationDollars, setEndYearOfCalculationDollars] = useState(null)\n\n    const [investingBlocks, setInvestingBlocks] = useState([])\n\n\n    useEffect(() => {\n        calculateTotalOverTimePeriod()\n    }, [investingBlocks])\n\n\n    function handleAddInvestingBlock(initial, name, contributions, time, rateReturn, rateInflation) {\n        let temp = investingBlocks\n        temp.push({\n            name: name,\n            initial: initial,\n            contributions: contributions,\n            time: time,\n            rateReturn: rateReturn,\n            rateInflation: rateInflation,\n        })\n        setInvestingBlocks(temp)\n        calculateTotalOverTimePeriod()\n    }\n\n\n    function calculateTotalOverTimePeriod() {\n        let toChart = []\n        let currentYear = startYear\n        toChart.push(['Year', {\n            role: 'annotation',\n            type: 'string'\n        }, 'Principle', `${new Date().getFullYear()} Adjusted Dollars`, 'Total']);\n        if (investingBlocks.length === 0) {\n            toChart.push([\n                (currentYear).toString(),\n                null,\n                0,\n                0,\n                0\n            ])\n            setChartedData(toChart)\n        } else {\n            let moneyInput = investingBlocks[0]['initial']\n            let runningTotal = moneyInput;\n            let yearCalculatedDollars = moneyInput;\n            for (let i = 0; i < investingBlocks.length; i++) {\n                let currentBlock = investingBlocks[i];\n                for (let j = 0; j < currentBlock['time']; j++) {\n                    moneyInput += currentBlock['contributions']\n                    runningTotal += currentBlock['contributions']\n                    let interest = runningTotal * (currentBlock['rateReturn'] / 100)\n                    runningTotal += interest\n                    //Adjust for inflation\n                    yearCalculatedDollars += currentBlock['contributions'] + interest\n                    yearCalculatedDollars *= (1 - (currentBlock['rateInflation'] / 100))\n                    toChart.push([\n                        (currentYear + j).toString(),\n                        j !== 0 ? null : currentBlock['name'],\n                        moneyInput,\n                        yearCalculatedDollars,\n                        runningTotal\n                    ])\n                }\n                currentYear += currentBlock['time']\n            }\n            setChartedData(toChart)\n            setEndPrincipal(moneyInput)\n            setEndYearOfCalculationDollars(yearCalculatedDollars)\n            setEndInterest(runningTotal - moneyInput)\n        }\n    }\n\n\n    const style = {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Compounder</h1>\n            <div>\n                <BoundariesChart data={chartedData}/>\n            </div>\n            <hr/>\n            {endInterest !== null ?\n                <div style={style}><h3>📈 Interest Gained </h3> <h3>📈 {endInterest.toFixed(2)}</h3></div> : <p></p>}\n            {endYearOfCalculationDollars !== null ? <div style={style}>\n                <h3>💸 {new Date().getFullYear()} Dollars:</h3> <h3>💸 {endYearOfCalculationDollars.toFixed(2)}</h3></div> :\n                <p></p>}\n            {endPrincipal !== null ? <div style={style}><h3>💵 Net Contributions:</h3> <h3>💵 {endPrincipal.toFixed(2)}</h3></div> :\n                <p></p>}\n            <hr/>\n            <AddBlock handleAddInvestingBlock={handleAddInvestingBlock}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}